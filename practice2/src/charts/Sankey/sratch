  // return only the distinct / unique nodes
  graph.nodes = d3.keys(
    d3
      .nest()
      .key(function (d) {
        return d.name;
      })
      .object(graph.nodes)
  );

  graph.links.forEach(function (d, i) {
    graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);
    graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);
  });
  console.log(graph);
  // loop through each node to make nodes an array of objects instead of an array of strings
  graph.nodes.forEach(function (d, i) {
    graph.nodes[i] = { name: d };
  });
  // Properties for nodes to keep track of whether they are collapsed and how many of their parent nodes are collapsed
  graph.nodes.forEach(function (d, i) {
    //graph.nodes[i] = { name: d };
    graph.nodes[i].collapsing = 0; // count of collapsed parent nodes
    graph.nodes[i].collapsed = false;
    graph.nodes[i].collapsible = false;
  });

  console.log(graph);

  graph.links.forEach(function (e) {
    e.source = graph.nodes.filter(function (n) {
      return n.name === e.source;
    })[0];
  });

  console.log(graph);

  // This is needed to update the plot
  sankey(graph);

  //console.log(graph);

  const link = svg
    .append("g")
    .selectAll(".link")
    .data(graph.links)
    .enter()
    .append("path")
    .attr("class", "link")
    .attr("d", sankeyLinkHorizontal())
    //.attr("stroke-width", function (d) { return d.width; }) // v1 - // Controls width of links
    .attr("stroke-width", function (d) {
      return Math.max(1, d.y0);
    })
    .sort(function (a, b) {
      return b.dy - a.dy;
    });

  // add the link titles
  link.append("title").text(function (d) {
    return d.source.name + " -> " + d.target.name + "\n" + format(d.value);
  });

  // add the nodes
  const node = svg
    .append("g")
    .selectAll(".node")
    .data(graph.nodes)
    .enter()
    .append("g")
    .attr("class", "node");
  console.log(graph);
  // Add the rectangles for the nodes
  node
    .append("rect")
    .join("rect")
    .attr("x", (d) => d.x0)
    .attr("y", (d) => d.y0)
    .attr("height", function (d) {
      return d.y1 - d.y0;
    })
    //.attr("height", (d) => d.y0 - 0)
    .attr("width", (d) => d.x1 - d.x0)
    .style("fill", function (d) {
      return (d.color = color(d.name.replace(/ .*/, "")));
    })
    .append("title")
    .text(function (d) {
      return d.name + "\n" + format(d.value);
    });

  // add titles to the node
  node
    //.append("text")
    //.selectAll("text")
    .append("text")
    .attr("font-size", 10)
    //.attr("x", -6)
    //.attr("y", function (d) {  return d.dy / 2;})
    .attr("dy", "0.35em")
    .attr("text-anchor", "end")
    .attr("transform", "end")
    .attr("transform", null)
    .text(function (d) {
      return d.name;
    })
    //.filter(function (d) {return d.x < dimensions.width / 2;})
    .attr("x", (d) => (d.x0 < dimensions.width / 2 ? d.x1 + 6 : d.x0 - 6))
    .attr("y", (d) => (d.y1 + d.y0) / 2)
    .attr("dy", "0.35em")
    .attr("text-anchor", (d) =>
      d.x0 < dimensions.width / 2 ? "start" : "end"
    );

  function update() {
    const nodes = graph.nodes.filter(function (d) {
      //return nodes with no collapsed parent nodes
      return d.collapsing == 0;
    });

    const links = graph.links.filter(function (d) {
      // return only links where source and target are visible
      return d.source.collapsing == 0 && d.target.collapsing == 0;
    });
  }

  //link.attr("d", sankeyLinkHorizontal);