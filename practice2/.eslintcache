[{"/Users/amanda/GitHub/React-D3-Tests/practice2/src/index.js":"1","/Users/amanda/GitHub/React-D3-Tests/practice2/src/App.js":"2","/Users/amanda/GitHub/React-D3-Tests/practice2/src/reportWebVitals.js":"3","/Users/amanda/GitHub/React-D3-Tests/practice2/src/Dashboard.js":"4","/Users/amanda/GitHub/React-D3-Tests/practice2/src/views/View1/index.js":"5","/Users/amanda/GitHub/React-D3-Tests/practice2/src/utils.js":"6","/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/Linechart/index.js":"7","/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/Linechart/vis.js":"8","/Users/amanda/GitHub/React-D3-Tests/practice2/src/views/View3/index.js":"9","/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/myLinechart/index.js":"10","/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/myLinechart/chart.js":"11","/Users/amanda/GitHub/React-D3-Tests/practice2/src/data/index.js":"12"},{"size":543,"mtime":1609460743827,"results":"13","hashOfConfig":"14"},{"size":295,"mtime":1609526678235,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1609300580545,"results":"16","hashOfConfig":"14"},{"size":791,"mtime":1609548759476,"results":"17","hashOfConfig":"14"},{"size":510,"mtime":1609548976438,"results":"18","hashOfConfig":"14"},{"size":2465,"mtime":1609460442116,"results":"19","hashOfConfig":"14"},{"size":296,"mtime":1609528917757,"results":"20","hashOfConfig":"14"},{"size":1639,"mtime":1609548450953,"results":"21","hashOfConfig":"14"},{"size":520,"mtime":1609548954938,"results":"22","hashOfConfig":"14"},{"size":325,"mtime":1609461950816,"results":"23","hashOfConfig":"14"},{"size":8112,"mtime":1609528347422,"results":"24","hashOfConfig":"14"},{"size":9161,"mtime":1609528985609,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"5xp7ke",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/amanda/GitHub/React-D3-Tests/practice2/src/index.js",["54"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Dashboard from \"./Dashboard\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["55","56"],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/App.js",["57","58"],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/reportWebVitals.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/Dashboard.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/views/View1/index.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/utils.js",[],["59","60"],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/Linechart/index.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/Linechart/vis.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/views/View3/index.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/myLinechart/index.js",[],"/Users/amanda/GitHub/React-D3-Tests/practice2/src/charts/myLinechart/chart.js",["61","62","63","64","65","66","67","68","69"],"import { OmitProps } from \"antd/lib/transfer/ListBody\";\nimport * as d3 from \"d3\";\n//import React from 'react';\n//import ReactDOM from 'react-dom';\n//import '../src/index.css';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst drawLineChart = async () => {\n  //write your code here\n\n  // 1. access the data\n  // await is a S keyword that will PAUSE THE EXEC OF A FUNC\n  // UNTIL A PROMISE IS RESOLVED (only works with async)\n  // just means any code (w/i func) will wait to run until data is defined\n\n  const dataset = await d3.json(\"../../data/nyc_weather_data.json\");\n\n  /*\n  const draw = (props) => {\n    let data = [];\n    if (props.data !== null) {\n      dataset = _.cloneDeep(props.data);\n    }\n    */\n  console.log(dataset);\n  //console.table(dataset[0]s);\n\n  // create a yAccessor for plotting y-axis pts\n  const yAccessor = (d) => d.temperatureMax;\n\n  // xAccessor\n  const dateParser = d3.timeParse(\"%Y-%m-%d\");\n  const xAccessor = (d) => dateParser(d.date);\n\n  // Drawing the Chart\n\n  // wrapper - contains the entire chart (data elements, axes, labels)\n  // bounds - contains all data elements (line)\n\n  let dimensions = {\n    width: window.innerWidth * 0.9,\n    height: 400,\n    margin: {\n      top: 15, // small top\n      right: 15, // small right to give the chart space\n      bottom: 40, // larger bottom for axes\n      left: 60, // larger left for axes\n    },\n  };\n\n  // size of the bounds\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  // use d3.select()\n  // three types of css selectors:\n  // 1) select all elements w/ class name (.class)\n  // 2) select all elements w/ id (#id)\n  // 3) select all elements of a specfic node type (type)\n\n  // select the \"#wrapper\" element from the index.html\n  // 1.1) const wrapper = d3.select(\"#wrapper\")\n  // _groups is important in this\n\n  // add svg element using \"append\"\n  // 1.2) const svg = wrapper.append(\"svg\")\n\n  // determine size of svg w/ \".attr()\"\n  // first arg = name\n  // second arg = value\n  // 1.3) svg.attr(\"width\", dimensions.width)\n  // 1.4) svg.attr(\"height\", dimesions.height)\n\n  // d3-selection return a selection obj\n  // any mthd that selects/creates a new obj -> return new selection\n  // any mthd that manips current selec -> return same selection\n  // 1.1-1.4 above can be rewritten as:\n  const wrapper = d3\n    //.select(\"#wrapper\")\n    .select(\".vis-linechart\")\n    .append(\"svg\")\n    .attr(\"width\", dimensions.width)\n    .attr(\"height\", dimensions.height);\n\n  // console shows svg is now linked to wrapper\n  // default size is 300x150\n  //console.log(wrapper)\n\n  // creating bounding box\n  // create group that shifts contents to respect top and left margins\n  // need to use svg elements to work inside svg element, lets use \"g\"\n  // using \".style()\" for adding and modifying css styles\n  // takes key-value pair as first and second args\n  const bounds = wrapper\n    .append(\"g\")\n    .style(\n      \"transform\",\n      `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`\n    );\n\n  // under \"Elements\" -> \"svg\" -> \"g\" appears\n\n  // create scales\n  // plotting the data's range reqs converting them into pixel space\n  // can do this using \"d3-scale\", a func that converts values btw 2 domains\n  // needs the domain (min and max input vals)\n  // needs the range (min and max output vals)\n  // use d3-array's \"d3.extent()\"\n  // first arg: array of data pts\n  // second arg: accessor func defaults to an identity func (d => d)\n  const yScale = d3\n    .scaleLinear()\n    .domain(d3.extent(dataset, yAccessor))\n    // dimensions.boundedHeight = highest val\n    .range([dimensions.boundedHeight, 0]);\n\n  //console.log(yScale(32))\n\n  const freezingTemperaturePlacement = yScale(30);\n  const freezingTemperatures = bounds\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"width\", dimensions.boundedWidth)\n    .attr(\"y\", freezingTemperaturePlacement)\n    .attr(\"height\", dimensions.boundedHeight - freezingTemperaturePlacement)\n    .attr(\"fill\", \"#e0f3f3\");\n\n  // x-Axis\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(dataset, xAccessor))\n    .range([0, dimensions.boundedWidth]);\n\n  const lineGenerator = d3\n    .line()\n    .x((d) => xScale(xAccessor(d))) // finds scaled x vals\n    .y((d) => yScale(yAccessor(d))); // finds scaled y vals\n\n  const line = bounds\n    .append(\"path\")\n    // feed dataset\n    .attr(\"d\", lineGenerator(dataset))\n    .attr(\"fill\", \"none\") // do not fill\n    .attr(\"stroke\", \"#af9358\")\n    .attr(\"stroke-width\", 2);\n\n  // draw axes\n  const yAxisGenerator = d3.axisLeft().scale(yScale);\n\n  // create \"g\" element to hold all yaxis elements\n  // use \".call()\" to\n  // 1) prevent saving selection as a var\n  // 2) preserve selection for additional chaining\n  const yAxis = bounds.append(\"g\").attr(\"class\", \"y-axis\").call(yAxisGenerator);\n\n  // y-axis label\n  const yAxisLabel = yAxis\n    .append(\"text\")\n    .attr(\"class\", \"y-axis-label\")\n    .attr(\"x\", -dimensions.boundedHeight / 2)\n    .attr(\"y\", -dimensions.margin.left / 1.5)\n    .html(\"Max. Temperature (&deg;F)\");\n\n  // make xaxis\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n\n  const xAxis = bounds\n    .append(\"g\")\n    .call(xAxisGenerator)\n    .style(\"transform\", `translateY(${dimensions.boundedHeight}px)`);\n\n  // make listening rectangle\n  const listeningRect = bounds\n    .append(\"rect\")\n    .attr(\"class\", \"listening-rect\")\n    .attr(\"width\", dimensions.boundedWidth)\n    .attr(\"height\", dimensions.boundedHeight)\n    .on(\"mousemove\", onMouseMove)\n    .on(\"mouseleave\", onMouseLeave);\n\n  // tooltip\n  const tooltip = d3.select(\"#tooltip\");\n\n  // appending a circle to make it more clear which part is hovered over\n  const tooltipCircle = bounds\n    .append(\"circle\")\n    .attr(\"class\", \"tooltip-circle\")\n    .attr(\"r\", 4)\n    .attr(\"fill\", \"white\")\n    .attr(\"stroke\", \"#af9358\")\n    .attr(\"stroke-width\", 2)\n    .style(\"opacity\", 0);\n\n  function onMouseMove() {\n    const mousePosition = d3.mouse(this);\n    //console.log(mousePosition[0]);\n\n    // \".invert()\" converts units -> range to the domain\n    const hoveredDate = xScale.invert(mousePosition[0]);\n    //console.log(hoveredDate);\n\n    // get closest data point\n    // \"d3.scan()\" takes 2 adjacent items in an array and returns numerical vaue\n    // 2 args:\n    // 1) an array (the dataset)\n    // 2) optionl comparator func\n    // first find dist bwt hovered pt and dataset (in abs terms)\n    const getDistanceFromHoveredDate = (d) =>\n      Math.abs(xAccessor(d) - hoveredDate);\n\n    // then compare the two data points using \"d3.scan()\" comaprator func\n    // creates an array of dist from the hovered pt -> can then find smallest dist\n    const closestIndex = d3.scan(\n      dataset,\n      (a, b) => getDistanceFromHoveredDate(a) - getDistanceFromHoveredDate(b)\n    );\n\n    // grab closest datapt\n    const closestDataPoint = dataset[closestIndex];\n    const closestXValue = xAccessor(closestDataPoint);\n    const closestYValue = yAccessor(closestDataPoint);\n    //console.log(dataset[0]);\n\n    // format date\n    const formatDate = d3.timeFormat(\"%B %A %-d, %Y\");\n    tooltip.select(\"#date\").text(formatDate(closestXValue));\n\n    // format temp\n    const formatTemperature = (d) => `${d3.format(\".1f\")(d)}&deg;F`;\n    tooltip\n      .select(\"#temperature\")\n      // html ensures degrees is formatted properly\n      .html(formatTemperature(closestYValue));\n\n    // for the circle\n    tooltipCircle\n      .attr(\"cx\", xScale(closestXValue))\n      .attr(\"cy\", yScale(closestYValue))\n      .style(\"opacity\", 1);\n\n    // grab x and y pos\n    const x = xScale(closestXValue) + dimensions.margin.left;\n    const y = yScale(closestYValue) + dimensions.margin.top;\n\n    tooltip.style(\n      \"transform\",\n      `translate(` + `calc( -50% + ${x}px),` + `calc(-100% + ${y}px)` + `)`\n    );\n\n    tooltip.style(\"opacity\", 1);\n  }\n\n  function onMouseLeave() {\n    tooltip.style(\"opacity\", 0);\n    tooltipCircle.style(\"opacity\", 0);\n  }\n};\n\nexport default drawLineChart;\n","/Users/amanda/GitHub/React-D3-Tests/practice2/src/data/index.js",[],{"ruleId":"70","severity":1,"message":"71","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":11},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"70","severity":1,"message":"78","line":1,"column":13,"nodeType":"72","messageId":"73","endLine":1,"endColumn":15},{"ruleId":"70","severity":1,"message":"79","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":12},{"ruleId":"74","replacedBy":"80"},{"ruleId":"76","replacedBy":"81"},{"ruleId":"70","severity":1,"message":"82","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":19},{"ruleId":"70","severity":1,"message":"83","line":123,"column":9,"nodeType":"72","messageId":"73","endLine":123,"endColumn":29},{"ruleId":"70","severity":1,"message":"84","line":142,"column":9,"nodeType":"72","messageId":"73","endLine":142,"endColumn":13},{"ruleId":"70","severity":1,"message":"85","line":160,"column":9,"nodeType":"72","messageId":"73","endLine":160,"endColumn":19},{"ruleId":"70","severity":1,"message":"86","line":170,"column":9,"nodeType":"72","messageId":"73","endLine":170,"endColumn":14},{"ruleId":"70","severity":1,"message":"87","line":176,"column":9,"nodeType":"72","messageId":"73","endLine":176,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":250,"column":20,"nodeType":"90","messageId":"91","endLine":250,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":250,"column":46,"nodeType":"90","messageId":"91","endLine":250,"endColumn":47},{"ruleId":"88","severity":1,"message":"89","line":250,"column":71,"nodeType":"90","messageId":"91","endLine":250,"endColumn":72},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["92"],"no-negated-in-lhs",["93"],"'d3' is defined but never used.","'logo' is defined but never used.",["92"],["93"],"'OmitProps' is defined but never used.","'freezingTemperatures' is assigned a value but never used.","'line' is assigned a value but never used.","'yAxisLabel' is assigned a value but never used.","'xAxis' is assigned a value but never used.","'listeningRect' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]